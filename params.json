{"name":"Hypester","tagline":"A JavaScript library to help with common forms of interactivity in the Tumult Hype HTML5 editor.","body":"**Status: Alpha**\r\n\r\nA JavaScript library to help with common forms of interactivity in the\r\n[Tumult Hype](http://tumult.com/hype/) HTML5 editor.\r\n\r\nNote: Requires [jQuery 1.8+](http://jquery.com)\r\n\r\n## Setup\r\n\r\n1. Include jQuery in your Hype resource library\r\n2. Include hypester.js in your Hype resource library\r\n3. Call the appropriate functions below\r\n\r\n## Features\r\n\r\n### Initializing a new scene\r\n\r\nTo initialize a new scene, create a timeline action on the first frame that calls\r\nthis function with your scene settings:\r\n\r\n```javascript\r\nhypester.init ({\r\n\thype: hypeDocument,                 // a copy of the hypeDocument object\r\n\thidden_elements: 2,                 // how many hidden elements to find in the scene\r\n\talert_timeline: 'alert-incomplete', // the timeline of the alert message\r\n\tnext_scene: 'next',                 // the next scene to load\r\n\tcompleted: false                    // mark the activity not completed\r\n});\r\n```\r\n\r\nThis does several things:\r\n\r\n1. If a `#scene-name` hash is added to the end of a URL, it will jump to that scene immediately.\r\n2. Initializes the number of hidden elements to find in the scene, for use with `hypester.next()`.\r\n3. Initializes the scene history for dynamic \"Previous\" buttons in branching scenes.\r\n\r\nIf no hidden elements are present in the scene, the defaults should not cause any\r\nbehaviour issues for other scene types. Alternately, you can use the shorter form\r\nof the function call like this:\r\n\r\n```javascript\r\nhypester.init ({hype: hypeDocument});\r\n```\r\n\r\n### Navigating to a specific scene from another file\r\n\r\nTo send a user to a specific scene within a Hype file, make sure the file you're\r\nnavigating to uses the `hypester.init()` function in the first scene, then link\r\nto it with the scene name in the URL's inner anchor value, like this:\r\n\r\n```\r\nmy-hype-activity.html#scene-name\r\n```\r\n\r\n### Triggering the next scene\r\n\r\nTo trigger the next scene, while ensuring all elements were clicked and/or the\r\nactivity has been marked completed, attach a callback action to the \"Next\" button\r\nthat calls this function:\r\n\r\n```javascript\r\nhypester.next (hypeDocument);\r\n```\r\n\r\n### Marking the scene completed\r\n\r\nTrigger this when the activity has been completed so `hypester.next()` knows to\r\ncontinue to the next scene.\r\n\r\n```javascript\r\nhypester.completed ();\r\n```\r\n\r\n### Marking a hidden element as clicked\r\n\r\nTo mark a hidden element as clicked, call this in a callback function on the mouse\r\nclick event for each element, numbering them from 0 to 11 (instead of 1 to 12):\r\n\r\n```javascript\r\nhypester.clicked (0);\r\n```\r\n\r\n### Go to the previous scene in a branching scenario\r\n\r\nTo go to the previous scene in the history of a branching scenario, attach a\r\ncallback action to your \"Previous\" button that calls this function:\r\n\r\n```javascript\r\nhypester.previous (hypeDocument);\r\n```\r\n\r\n### Creating drag and drop activities\r\n\r\nUse the `hypester.drag_handler()` and `hypester.drag_completed()` functions to\r\ncreate drag and drop activities with multiple dropzones per draggable element,\r\none or more of which are the correct choice.\r\n\r\n#### Step 1. Initialize the scene\r\n\r\nInitialize the scene on the first keyframe of the `Main Timeline` like this:\r\n\r\n```javascript\r\nhypester.init ({\r\n\thype: hypeDocument,\r\n\telement: element,\r\n\tevent: event,\r\n\tdraggable: {\r\n\t\telements: 4,\r\n\t\tcompleted_timeline: 'complete',\r\n\t\tdropzones: [\r\n\t\t\t{ id: 'drop1' },\r\n\t\t\t{ id: 'drop2' },\r\n\t\t\t{ id: 'drop3' },\r\n\t\t\t{ id: 'drop4' }\r\n\t\t]\r\n\t}\r\n});\r\n```\r\n\r\nSpecify the number of draggable elements in the `elements` setting, and a timeline\r\nthat should be run when all of the elements have been dropped into the correct dropzone.\r\nThis timeline will be triggered by `hypester.drag_completed()` only when all of the\r\nelements have been dropped correctly.\r\n\r\nEach dropzone has an `id` setting that should match an element's `Unique Element ID`\r\nfield in the Hype Inspector, which you will need to set manually. A dropzone may also\r\nhave `bg_off` and `bg_on` settings which are used to toggle the background image of\r\nthe element when a draggable element hovers over it. The images should be loaded into\r\nyour Hype Resources. For example:\r\n\r\n```javascript\r\n{ id: 'drop1', bg_off: 'drop1_off.png', bg_on: 'drop1_on.png' }\r\n```\r\n\r\n#### Step 2. Make your elements draggable\r\n\r\nOn each draggable element, open the Hype Inspector and add two `On Drag` actions:\r\n\r\n1. `Control Element Position` to enable drag and drop\r\n2. `Run Javascript` and create a new function\r\n\r\nCall the following in your newly created function:\r\n\r\n```javascript\r\nhypester.drag_handler ({\r\n\thype: hypeDocument,\r\n\telement: element,\r\n\tevent: event,\r\n\tcorrect_answer: 'drop2',\r\n\tcorrect_timeline: 'correct',\r\n\tincorrect_timeline: 'incorrect',\r\n\treset_timeline: 'reset_drag1'\r\n});\r\n```\r\n\r\nThe `correct_answer` is the ID of the dropzone or list of IDs of the dropzones\r\nthat are considered correct choices. To specify a list, set it to an array, e.g.,\r\n`['drop2', 'drop3']`.\r\n\r\nThe `correct_timeline` is a timeline that is played when the user drops an element\r\nonto one of the correct dropzones.\r\n\r\nThe `incorrect_timeline` is a timeline that is played when the user drops an\r\nelement onto one of the other dropzones.\r\n\r\nThe `reset_timeline` is a timeline that is played when the user drops an element onto\r\nanywhere except one of the correct dropzones to reset its position. At keyframe 0,\r\nthis timeline should pin the `Origin (Left)` and `Origin (Top)` properties to its\r\ninitial location in the scene.\r\n\r\n#### Step 3. Check if the activity has been completed\r\n\r\nIn the last frame of your `correct_timeline` timeline(s), add a Timeline Action that\r\nruns a new JavaScript function like this:\r\n\r\n![Timeline Action](https://raw.githubusercontent.com/jbroadway/hypester/master/docs/pix/drag_completed_action.png)\r\n\r\nThe function should contains the following code:\r\n\r\n```javascript\r\nhypester.drag_completed (hypeDocument);\r\n```\r\n\r\n\r\n\r\nThis will trigger the `completed_timeline` from `hypester.init()` only when all of\r\nthe draggable elements have been dropped on the correct dropzones.\r\n\r\n-----\r\n\r\nBrought to you by [The Campfire Union](https://www.campfireunion.com)\r\n","google":"UA-50509220-3","note":"Don't delete this file! It's used internally to help with page regeneration."}